"""
******************************************************************************
* Program: ATM Project 2.0
* Language: Python 3.5.2
*
* University: Husson
* Author: Gary Ward
* Course: MI 261
* Date: 2022-12-16
*
* Description: ATM COURSE PROJECT
*
* Edit History / Change Log
* DATE                 CHANGE DESCRIPTION
* ---------------------------------------
* 2022-11-06           ATM Project 3rd Iteration
* 2022-12-03           ATM Project Receipt
* 2022-12-08           Added variable declarations & function definitions.
* 2022-12-10           Adding new menu functionality
* 2022-12-11           Main menu written, can successfully enter acct info and exit atm. Working on
                       deposit functionality.
* 2022-12-12           Deposit functionality written and working. Need to figure out how to add values
                       from all accounts together and print to receipt. Focus on vars.
* 2022-12-13           Writing withdrawal functions and working on adding all totals to build receipt
                       functionality. Will need to work on data validation piece.
* 2022-12-13           Balance inquiry complete. Deposit functionality complete. Program doesn't check
                       check balances correctly or deposit and wthdraw totals. This is an important part
                       of the business rules. Maybe need to simplify the program to achieve this. Break
                       down deposit and withdraw functions into separate pieces that handle user inputs
                       alone and validate totals in a separate function.
* 2022-12-14           Working on a version 2 of the program. Including the pieces that work and modifying
                       deposit and withdraw functions.
* 2022-12-14           Modified login functionality.
* 2022-12-14           Added new variables for checking, savings 1 and savings 2 to build fund tracking
                       functionality.
* 2022-12-14           Finished edits to login and deposit. Added print statements in exit_ATM() to display
                       user totals in all accounts. Still need to work out kinks in withdrawal function.
* 2022-12-14           Withdrawal functions complete! Huge win. All that's left is receipt functionality!
* 2022-12-15           Working on receipt functionality. Using the last for loop as a template.
* 2022-12-15           Working on receipt functionality. Using the last for loop as a template.-12-15           Added acct_summary function to display starting and ending account balances.
* 2022-12-15           Working on receipt functionality. Using the last for loop as a template.
* 2022-12-15           Finished receipt functionality.
* 2022-12-15           Adjusted display menu functionality - put menu options inside the loop. Edited prompts
                       displayed to user.
* 2022-12-15           Adjusted variables associated with withdrawal functions.
* 2022-12-16           Fixed withdrawal functions so they adhere to business rules. Made minor adjustments to
                       receipt functionality.
* 2022-12-16           Last minute edits to balance inquiry, deposit, withdrawal and receipt printing logic.
******************************************************************************
variable declaration:
global variables
    pin_num = 9999
    acct_num = 1234
    
    
    dep_min = 0
    dep_max = 1000
    withdraw_max_chk = 300
    withdraw_max_sav1 = 300
    withdraw_max_sav2 = 300
    withdraw_max_all = 750

    chkSBal = 500
    chkEBal = 500
    chkTotalDep = 0
    chkTotalWithdraw = 0

    sav1SBal = 1500
    sav1EBal = 1500
    sav1TotalDep = 0
    sav1TotalWithdraw = 0

    sav2SBal = 5000
    sav2EBal = 5000
    sav2TotalDep = 0
    sav2TotalWithdraw = 0

    totalDeposits = 0
    totalWithdraws = 0 
    
******************************************************************************
function definitions:
    def main()      - The governing function of the program
    welcome_menu()  - Displays the ATM welcome message
    acct_login()    - Asks for account number
    pin_login()     - Asks for pin.
    verify_pin()    - Verifies the pin number
    verify_acct()   - Verifies the acct. number.
    display_menu()  - Displays the transaction menu. Allows users to choose 1, 2, 3 or 4
                      to determine which option they would like.
    balance_inq()   - Allows the user to choose which account balance they would like to see.
    bal_inq_chk()   - Allows the user to see the acct. balance of the checking acct.
    bal_inq_sav1()  - Allows the user to see the acct. balance of savings acct. 1.
    bal_inq_sav2()  - Allows the user to see the acct. balance of savings acct. 2.
    
    withdraw()      - Allows the user to withdraw from any account.
    chk_wit()       - Allows the user to withdraw from the checking acct.
    sav1_wit()      - Allows the user to withdraw from savings acct. 1.
    sav2_wit()      - Allows the user to withdraw from savings acct. 2.
    
    deposit()       - Allows the user to deposit into any account
    deposit_chk()   - Allows the user to deposit into the checking acct.
    deposit_sav1()  - Allows the user to deposit into savings acct. 1.
    deposit_sav2()  - Allows the user to deposit intp savings acct. 2.
    acct_summary()  - Prints the starting and ending account balances.
    exit_ATM()      - Allows the user to exit the ATM.
    print_receipt() - Prints a receipt of the transaction to the user.
    write()         - Writes account data to a file.
    read()          - Reads the data in the atm file and prints it to the user.
    
******************************************************************************
"""
# Global Variables
acct_num = 1234
pin_num = 9999

dep_min = 0
dep_max = 1000

withdraw_max_chk = 300
withdraw_max_sav1 = 300
withdraw_max_sav2 = 300
withdraw_max_all = 750

chkSBal = 500
chkEBal = 500
chkTotalDep = 0
chkTotalWithdraw = 0

sav1SBal = 1500
sav1EBal = 1500
sav1TotalDep = 0
sav1TotalWithdraw = 0

sav2SBal = 5000
sav2EBal = 5000
sav2TotalDep = 0
sav2TotalWithdraw = 0

totalDeposits = 0
totalWithdraws = 0

# The main function of the program.
def main():
    global chkSBal, chkEBal, chkTotalDep, chkTotalWithdraw, sav1SBal, sav1EBal, sav1TotalDep, sav1TotalWithdraw
    global sav2SBal, sav2EBal, sav2TotalDep, sav2TotalWithdraw
    
    # Variables local to def main()
    userC = 0
    
    BALANCE_INQUIRY = 1
    WITHDRAWAL = 2
    DEPOSIT = 3
    EXIT_ATM = 4
    
    # Begin def main() execution.
    welcome_menu()
    # If logon is successful the user can access the ATM.
    if login() == True:
        while userC != EXIT_ATM:
            display_menu()
            userC = int(input('\nPlease choose a menu option: '))

            if  userC == BALANCE_INQUIRY:
                balance_inq()
            elif userC == WITHDRAWAL:
                withdraw()
            elif  userC == DEPOSIT:
                deposit()
            elif  userC == EXIT_ATM:
                exit_ATM()
            else:
                print('ERROR: You have entered an invalid selection.')
                print('Please try again.')
                
    else:
        print('Sorry, we were unable to log you in.')
        print('Please try again soon!')
        
# Displays the ATM welcome message.    
def welcome_menu():
    print('\nHello!')
    print('Welcome to the Python ATM Version 2.0!')
    print('Please enter your four digit account number')
    print('followed by your pin number. \n')

# Verifies account information.
def login():
    if acct_login() == True:
        if pin_login() == True:
            return True
        else:
            return False
    else:
        return False

# Asks for user acct number:
def acct_login():
    global acct_num
    attempts = 0
   
    while attempts < 3:
        acct_num = int(input('What is your account number? '))
       
        if acct_num == 1234:
            print('Account number accepted!')
            return True
        else:
            print('Invalid account number, please try again.')
            attempts += 1
            if attempts == 3:
                return False
                print('Your user session has expired, thanks for using the ATM!')
               
# Asks for user pin number.
def pin_login():
    attempts = 0
    while attempts < 3:
        pin_num = int(input('What is your pin number? '))
        if pin_num == 9999:
            print('Pin number accepted!')
            return True
        else:
            print('Invalid pin number, please try again.')
            attempts += 1
            if attemtps == 3:
                return False
                print('Your user session has expired, thanks for using the ATM!')

# The trans menu allows the user to choose what kind of transaction they would like to perform.
def display_menu():
    print()
    print('Please choose from one of the options below. \n')
    print(' ATM MENU ')
    print('1) BALANCE INQUIRY')
    print('2) WITHDRAWAL')
    print('3) DEPOSIT')
    print('4) EXIT ATM')

# Will be used to view account balances
def balance_inq():
    inqc = 0        # Account inquiry choice
    CHECKING = 1
    SAVINGS_1 = 2
    SAVINGS_2 = 3
    EXIT_MENU = 4

    while inqc != EXIT_MENU:
        print('Which account would you like to see the balance of?')
        print("""
            1 = Checking
            2 = Savings Account 1
            3 = Savings Account 2
            4 = Exit
        """)
        inqc = int(input('\nPlease choose a menu option: '))
        if inqc == CHECKING:
            balance_inq_chk()
        elif inqc == SAVINGS_1:
            balance_inq_sav1()
        elif inqc == SAVINGS_2:
            balance_inq_sav2()
        elif inqc == EXIT_MENU:
            print('\nThe ATM will now exit to the account menu.\n')
            
        else:
            print('ERROR: You have entered an invalid selection.')
            print('Please try again.')
            
# Allows the user to see the acct. balance of the checking acct.
def balance_inq_chk():
    global chkSBal, chkEBal  
    print('The starting balance for your checking account is', chkSBal)
    print()
    print('The final balance for your checking account is', chkEBal)
    input('Please press Enter to see more account options.')
    print()
    
# Allows the user to see the acct. balance of savings acct. 1.
def balance_inq_sav1():
    global sav1SBal, sav1EBal
    print('The starting balance for savings account #1 is', sav1SBal)
    print()
    print('The final balance for savings account #1 is', sav1EBal)
    input('Please press Enter to see more account options.')
    print()
    
# Allows the user to see the acct. balance of savings acct. 2.
def balance_inq_sav2():
    global sav2SBal, sav2EBal
    print('The starting balance for savings account #2 is', sav2SBal)
    print()
    print('The final balance for savings account #2 is', sav2EBal)
    input('Please press Enter to see more account options.')
    print()

# Will be used to withdraw funds from accounts    
def withdraw():
    witc = 0        # Account withdrawal choice.
    CHECKING = 1
    SAVINGS_1 = 2
    SAVINGS_2 = 3
    EXIT_MENU = 4

    while witc != EXIT_MENU:
        print('Which account would you like to withdraw from?')
        print("""
            1 = Checking
            2 = Savings Account 1
            3 = Savings Account 2
            4 = Exit
        """)
        witc = int(input('\nPlease choose a menu option: '))

        if witc == CHECKING:
            chk_withdrawal()
        elif witc == SAVINGS_1:
            sav1_withdrawal()
        elif witc == SAVINGS_2:
            sav2_withdrawal()
        elif witc == EXIT_MENU:
            print('\nThe ATM will now exit to the account menu.\n')
            exit_ATM()
        else:
            print('ERROR: You have entered an invalid selection.')
            print('Please try again.')

# Allows the user to withdraw from the checking acct.
def chk_withdrawal():
    global chkSBal, chkEBal, chkTotalWithdraw, totalWithdraws, withdraw_max_chk, withdraw_max_all
    
    print('Your current checkng account balance is', chkSBal)
    print()
    print('You cannot withdraw more than $300 from this account '\
          'and no more that $750 from all accounts combined.\n')
    
    chk_wit = int(input('Please enter a withdrawal amount of either 20, 40, 60, 80 or 100: '))
    if chkTotalWithdraw <= withdraw_max_chk and chkTotalWithdraw <= withdraw_max_all:
        if chk_wit in [20, 40, 60, 80, 100] and chk_wit < chkSBal and chk_wit < chkEBal:
            print('You have withdrawn', chk_wit)
            chkEBal -= chk_wit
            chkTotalWithdraw += chk_wit
            totalWithdraws += chk_wit
            print('Your new checking account balance is', chkEBal)
        else:
            print('The amount you entered was invalid. Please try again.')
    else:
        print('You have exceeded the maximum withdrawal amount. Please try again.')
# Allows the user to withdraw from savings acct. 1.
def sav1_withdrawal():
    global sav1SBal, sav1EBal, sav1TotalWithdraw, totalWithdraws, withdraw_max_sav1, withdraw_max_all
    
    print('Your current balance for savings account #1 is', sav1SBal)
    print()
    print('You cannot withdraw more than $300 from this account '\
          'and no more that $750 from all accounts combined.\n')
    
    sav1_wit = int(input('Please enter a withdrawal amount of either 20, 40, 60, 80 or 100: '))
    if sav1TotalWithdraw <= withdraw_max_sav1 and sav1TotalWithdraw <= withdraw_max_all:
        if sav1_wit in [20, 40, 60, 80, 100] and sav1_wit < sav1SBal and sav1_wit < sav1EBal:
            print('You have withdrawn', sav1_wit)
            sav1EBal -= sav1_wit
            sav1TotalWithdraw += sav1_wit
            totalWithdraws += sav1_wit
            print('Your new checking account balance is', sav1EBal)
        else:
            print('The amount you entered was invalid. Please try again.')
    else:
        print('You have exceeded the maximum withdrawal amount. Please try again.')
# Allows the user to withdraw from savings acct. 2.
def sav2_withdrawal():
    global sav2SBal, sav2EBal, sav2TotalWithdraw, totalWithdraws, withdraw_max_sav2, withdraw_max_all
    
    print('Your current balance for savings account #2 is', sav2SBal)
    print()
    print('You cannot withdraw more than $300 from this account '\
          'and no more that $750 from all accounts combined.\n')
    
    sav2_wit = int(input('Please enter a withdrawal amount of either 20, 40, 60, 80 or 100: '))
    if sav2TotalWithdraw <= withdraw_max_sav2 and sav2TotalWithdraw <= withdraw_max_all:
        if sav2_wit in [20, 40, 60, 80, 100] and sav2_wit < sav2SBal and sav2_wit < sav2EBal:
            print('You have withdrawn', sav2_wit)
            sav2EBal -= sav2_wit
            sav2TotalWithdraw += sav2_wit
            totalWithdraws += sav2_wit
            print('Your new checking account balance is', sav2EBal)
        else:
            print('The amount you entered was invalid. Please try again.')
    else:
        print('You have exceeded the maximum withdrawal amount. Please try again.')
# Allows the user to deposit into any account            
def deposit():
    depc = 0        # Account deposit choice.
    CHECKING = 1
    SAVINGS_1 = 2
    SAVINGS_2 = 3
    EXIT_MENU = 4 
    
    while depc != EXIT_MENU:
        print('\nPlease deposit funds into one of the following accounts.')
        print("""
            1 = Checking
            2 = Savings Account 1
            3 = Savings Account 2
            4 = Exit
        """)
        depc = int(input('\nPlease choose a menu option: '))

        if depc == CHECKING:
            chk_deposit()
        elif depc == SAVINGS_1:
            sav1_deposit()
        elif depc == SAVINGS_2:
            sav2_deposit()
        elif depc == EXIT_MENU:
            print('\nThe ATM will now exit to the account menu.\n')
            exit_ATM()
        else:
            print('ERROR: You have entered an invalid selection.')
            print('Please try again.')
            
# Allows the user to deposit into the checking acct.            
def chk_deposit():
    global chkSBal, chkEBal, chkTotalDep, totalDeposits
    dep_chk = 0
    
    dep_chk = int(input('Please enter a deposit total between $1 and $1000: '))
    print()
    if dep_chk > 0 and dep_chk <= 1000:
        # Deposit amount is ok, safe to process. 
        print('The amount of your deposit is', dep_chk)
        print()
        chkEBal += dep_chk
        chkTotalDep += dep_chk
        totalDeposits += dep_chk
        print('Your checking account balance is now', chkEBal)
        print()
    else:
        print('The amount you entered was invalid. Please try again.')
        dep_chk = int(input('Please enter a deposit total between $1 and $1000: '))

# Allows the user to deposit into savings acct. 1.
def sav1_deposit():
    global sav1SBal, sav1EBal, sav1TotalDep, totalDeposits
    dep_sav1 = 0
 
    dep_sav1 = int(input('Please enter a deposit total between $1 and $1000: '))
    print()
    if dep_sav1 > 0 and dep_sav1 >= 1000:
        print('The amount of your deposit is', dep_sav1)
        print()
        sav1EBal += dep_sav1
        sav1TotalDep += dep_sav1
        totalDeposits += dep_sav1
        print('Your balance for savings accont #1 is now', sav1EBal)
        print()
    else:
        print('The amount you entered was invalid. Please try again.')
        dep_sav1 = int(input('Please enter a deposit total between $1 and $1000: '))

# Allows the user to deposit intp savings acct. 2.
def sav2_deposit():
    global sav2SBal, sav2EBal, sav2TotalDep, totalDeposits
    dep_sav2 = 0
 
    dep_sav2 = int(input('Please enter a deposit total between $1 and $1000: '))
    print()
    if dep_sav2 > 0 and dep_sav2 >= 1000:
        print('The amount of your deposit is', dep_sav2)
        print()
        sav2EBal += dep_sav2
        sav2TotalDep += dep_sav2
        totalDeposits += dep_sav2
        print('Your balance for savings accont #2 is now', sav2EBal)
        print()
    else:
        print('The amount you entered was invalid. Please try again.')
        dep_sav2 = int(input('Please enter a deposit total between $1 and $1000: '))
        
# Prints the starting and ending account balances.
def acct_summary():
    global chkSBal, chkEBal, sav1SBal, sav1EBal, sav2SBal, sav2EBal
    print()
    print('The ATM will now display your account balance information.')
    input('To see your starting account balances, press Enter: ')
    print()
    print('Checking = $', chkSBal)
    print('Savings #1 = $', sav1SBal)
    print('Savings #2 = $', sav2SBal)
    print()
    input('To see your final account balances, press Enter: ')
    print()
    print('Checking = $', chkEBal)
    print('Savings #1 = $', sav1EBal)
    print('Savings #2 = $', sav2EBal)
    print()
    
# Allows the user to exit the ATM
def exit_ATM():
    acct_summary()
    another = 0
    print('\nYour session is about to end, would you like another transaction?')
    another = input('Please enter y for yes, anything else means no and the ATM will close: \n')
    if another == 'y':
        main()
    else:
        print('Wait! Before you go, the atm will print you a transaction receipt.')
        input('Press Enter to see your transaction receipt.')
        print_receipt()
        print('Thank you!')
        print('The ATM will now exit.')
        print('Goodbye!')
# Prints a receipt of the transaction to the user using write and read functions.
def print_receipt():
    write()
    read()
    
# Takes program data and writes it to a file.
def write():
    global chkSBal, chkEBal, sav1SBal, sav1EBal, sav2SBal, sav2EBal
    
    # Open ATM data file.
    atm_file = open('atmData.txt', 'w')

    # Append account balances to a file.
    atm_file.write(str('\n'))
    atm_file.write(str('ATM Receipt\n'))
    atm_file.write(str(chkSBal) + ' Checking Start Balance\n')
    atm_file.write(str(chkEBal) + ' Checking End Balance\n')
    atm_file.write(str(chkTotalWithdraw) + ' Total Withdrawals from checking\n')
    atm_file.write(str(chkTotalDep) + ' Total Deposits to checking\n')
    atm_file.write(str('\n'))
    atm_file.write(str(sav1SBal) + ' Savings Acct #1 Start Balance\n')
    atm_file.write(str(sav1EBal) + ' Savings Acct #1 End Balance\n')
    atm_file.write(str(sav1TotalWithdraw) + ' Total Withdrawals from Savings #1\n')
    atm_file.write(str(sav1TotalDep) + ' Total Deposits to Savings #1\n')
    atm_file.write(str('\n'))
    atm_file.write(str(sav2SBal) + ' Savings Acct #2 Start Balance\n')
    atm_file.write(str(sav2EBal) + ' Savings Acct #2 End Balance\n')
    atm_file.write(str(sav2TotalWithdraw) + ' Total Withdrawals from Savings #2\n')
    atm_file.write(str(sav2TotalDep) + ' Total Deposits to Savings #2\n')

    # Close the file.
    atm_file.close()
    
# Program reads transaction data that was written to a file.
def read():
    global chkSBal, chkEBal, sav1SBal, sav1EBal, sav2SBal, sav2EBal
    
    # Open ATM data file.
    atm_file = open('atmData.txt', 'r')

    # Read all the lines in the file.
    file_contents = atm_file.read()

    # Close the file.
    atm_file.close()

    # Print the data that was read into memory.
    print(file_contents)
    
main()

